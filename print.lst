


ARM Macro Assembler    Page 1 


    1 00000000         ; Print.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         ; Runs on LM4F120 or TM4C123
    5 00000000         ; EE319K lab 7 device driver for any LCD
    6 00000000         ;
    7 00000000         ; As part of Lab 7, students need to implement these LCD
                       _OutDec and LCD_OutFix
    8 00000000         ; This driver assumes two low-level LCD functions
    9 00000000         ; ST7735_OutChar   outputs a single 8-bit ASCII characte
                       r
   10 00000000         ; ST7735_OutString outputs a null-terminated string 
   11 00000000         
   12 00000000                 IMPORT           ST7735_OutChar
   13 00000000                 IMPORT           ST7735_OutString
   14 00000000                 EXPORT           LCD_OutDec
   15 00000000                 EXPORT           LCD_OutFix
   16 00000000         
   17 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   18 00000000                 THUMB
   19 00000000         
   20 00000000         
   21 00000000         
   22 00000000         ;-----------------------LCD_OutDec----------------------
                       -
   23 00000000         ; Output a 32-bit number in unsigned decimal format
   24 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   25 00000000         ; Output: none
   26 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   27 00000000         ; Details: Implements Euclidean Division (Quotient-Remai
                       nder Theorem) through
   28 00000000         ;      recursion! 
   29 00000000         ; Euclidean Division Theorem 
   30 00000000         ;  a = b*q + r,
   31 00000000         ; where *a* is the sum of the quotient *q* and  divisor 
                       *b* plus the remainder *r*,
   32 00000000         ; r = MOD[a/10] = A%10,
   33 00000000         ; q = DIV[a/10] = 10|A; 
   34 00000000         ; In this code:
   35 00000000         ;  R3 is the *divisor*, R2 is the *dividen*, 
   36 00000000         ; R1 is the remainder, R0 is the quotient;
   37 00000000         ;
   38 00000000         ; WARNING: This code makes every effort not to implement
                        a new stack frame! Thus,
   39 00000000         ;     there are plenty of GOTO statements within. Procee
                       d at your own risk.
   40 00000000         ;     Also, I like abstract things way too much...
   41 00000000         
   42 00000000         LCD_OutDec                           ; Set it up!! (This
                                                             will all make sens
                                                            e in the future)
   43 00000000 4671            MOV              R1, LR      ; R0 = R1 = LR will
                                                             be a special indic
                                                            ation of 
   44 00000002 B502            PUSH             {R1, LR}    ; reaching the "bot



ARM Macro Assembler    Page 2 


                                                            tom" of the stack.
   45 00000004 B502            PUSH             {R1, LR}
   46 00000006 F04F 030A       MOV              R3, #10     ; R3 is simply the 
                                                            *divisor*
   47 0000000A         
   48 0000000A         Stack_It
   49 0000000A 280A            CMP              R0, #10     ; if (R0 < 10){
   50 0000000C D204            BHS              Not_Yet     ; LCD_OutChar(R0 + 
                                                            0x30);
   51 0000000E F100 0030       ADD              R0, R0, #48 ; GOTO Start_Poppin
                                                            g; // hurray! 0x30 
                                                            or #48 is the ascii
                                                             offset
   52 00000012 F7FF FFFE       BL               ST7735_OutChar ; }
   53 00000016 E009            B                Start_Popping ;
   54 00000018         
   55 00000018         Not_Yet                              ; else { 
   56 00000018 4602            MOV              R2, R0      ; R2 := R0;
   57 0000001A FBB2 F0F3       UDIV             R0, R2, R3  ; R0 := 10|R2; 
   58 0000001E FB00 F103       MUL              R1, R0, R3  ; R1 := 10*R0;
   59 00000022 EBA2 0101       SUB              R1, R2, R1  ;  R1 := R2 - R1 = 
                                                            R2%10;
   60 00000026 B403            PUSH             {R0,R1}     ; GOTO Stack_It;
   61 00000028 B502            PUSH             {R1, LR}    ;
   62 0000002A E7EE            B                Stack_It    ; }
   63 0000002C         
   64 0000002C         Start_Popping                        ; Yay! =')
   65 0000002C E8BD 4002       POP              {R1, LR}    ;
   66 00000030 BC03            POP              {R0, R1}    ; while(R0 != R1){
   67 00000032 4571            CMP              R1, LR      ; R0 := R1;
   68 00000034 D004            BEQ              Stop_Popping ; LCD_OutChar(R0 +
                                                             0x30);
   69 00000036 F101 0030       ADD              R0, R1, #48 ; R0 := Previous(R0
                                                            );
   70 0000003A F7FF FFFE       BL               ST7735_OutChar ; R1 := Previous
                                                            (R1);
   71 0000003E E7F5            B                Start_Popping ; }
   72 00000040         
   73 00000040         Stop_Popping                         ; Aww... 
   74 00000040 468E            MOV              LR, R1
   75 00000042 4770            BX               LR
   76 00000044         ;* * * * * * * * End of LCD_OutDec * * * * * * * *
   77 00000044         
   78 00000044         ; -----------------------LCD _OutFix--------------------
                       --
   79 00000044         ; Output characters to LCD display in fixed-point format
                       
   80 00000044         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99
   81 00000044         ; Inputs:  R0 is an unsigned 32-bit number
   82 00000044         ; Outputs: none
   83 00000044         ; E.g., R0=0,    then output "0.000 "
   84 00000044         ;       R0=3,    then output "0.003 "
   85 00000044         ;       R0=89,   then output "0.089 "
   86 00000044         ;       R0=123,  then output "0.123 "
   87 00000044         ;       R0=9999, then output "9.999 "
   88 00000044         ;       R0>9999, then output "*.*** "
   89 00000044         ; Invariables: This function must not permanently modify
                        registers R4 to R11



ARM Macro Assembler    Page 3 


   90 00000044         LCD_OutFix                           ; Once more, set it
                                                             up!!!!!!!
   91 00000044 4671            MOV              R1, LR      ; R1 = LR is a spec
                                                            ial indication of r
                                                            eaching
   92 00000046 B502            PUSH             {R1, LR}    ; the "bottom" of t
                                                            he stack.
   93 00000048 4601            MOV              R1, R0      ;  R1 is preserved 
                                                            for a constant.
   94 0000004A F04F 0303       MOV              R3, #3      ;  R3 is a counter 
                                                            of 3.
   95 0000004E F242 7010       MOV              R0, #10000
   96 00000052         
   97 00000052 4281            CMP              R1, R0      ; if(R1 >= 10,000){
                                                            
   98 00000054 D316            BLO              Stack_It_2  ; LCD_OutChar(0x2A)
                                                            ; 
   99 00000056         ; LCD_OutChar(0x2E);
  100 00000056 F04F 002A       MOV              R0, #42     ; LCD_OutChar(0x2A)
                                                            ; 
  101 0000005A F7FF FFFE       BL               ST7735_OutChar ; LCD_OutChar(0x
                                                            2A); 
  102 0000005E F04F 002E       MOV              R0, #46     ; LCD_OutChar(0x2A)
                                                            ; 
  103 00000062 F7FF FFFE       BL               ST7735_OutChar ; GOTO Stop_Popp
                                                            ing_2;
  104 00000066 F04F 002A       MOV              R0, #42     ;}
  105 0000006A F7FF FFFE       BL               ST7735_OutChar ;
  106 0000006E F04F 002A       MOV              R0, #42     ;
  107 00000072 F7FF FFFE       BL               ST7735_OutChar ; else {
  108 00000076 F04F 002A       MOV              R0, #42     ; GOTO Stack_It_2;
  109 0000007A F7FF FFFE       BL               ST7735_OutChar ; }
  110 0000007E E8BD 4002       POP              {R1, LR}    ; 
  111 00000082 E028            B                Stop_Popping_2 ;
  112 00000084         
  113 00000084         Stack_It_2
  114 00000084 2B00            CMP              R3, #0      ; if (R3 == 0){
  115 00000086 D108            BNE              Not_Yet_2   ; LCD_OutChar(R0 + 
                                                            0x30);
  116 00000088 F101 0030       ADD              R0, R1, #48 ; LCD_OutChar((R0 =
                                                             0x2E));
  117 0000008C F7FF FFFE       BL               ST7735_OutChar ;  GOTO Start_Po
                                                            pping; // hurray ag
                                                            ain!
  118 00000090 F04F 002E       MOV              R0, #46     ; }
  119 00000094 F7FF FFFE       BL               ST7735_OutChar ;
  120 00000098 E00C            B                Start_Popping_2 ;
  121 0000009A         
  122 0000009A         Not_Yet_2                            ; else { 
  123 0000009A F1A3 0301       SUB              R3, #1      ; R3--;      R3 is 
                                                            the counter
  124 0000009E 460A            MOV              R2, R1      ; R2 == R1;
  125 000000A0 F04F 000A       MOV              R0, #10     ;  R0 == 10; 
  126 000000A4 FBB2 F1F0       UDIV             R1, R2, R0  ; R1 := 10|R2;     
                                                            R1 is the quotient 
                                                            
  127 000000A8 FB01 F000       MUL              R0, R1, R0  ; R0 := 10*R1; R0 =
                                                             bq  R0 is the rema
                                                            inder



ARM Macro Assembler    Page 4 


  128 000000AC EBA2 0000       SUB              R0, R2, R0  ;  R0 := R2 - R0 = 
                                                            R2%10;
  129 000000B0 B403            PUSH             {R0, R1}    ; GOTO Stack_It;
  130 000000B2 E7E7            B                Stack_It_2  ; }
  131 000000B4         
  132 000000B4         Start_Popping_2                      ; This was not as f
                                                            un...
  133 000000B4 BC03            POP              {R0, R1}    ; while(R3 != 3){  
                                                            
  134 000000B6 F100 0030       ADD              R0, R0, #48 ; R0 = Previous(R0)
                                                            ;
  135 000000BA F7FF FFFE       BL               ST7735_OutChar ; R1 = Previous(
                                                            R1);
  136 000000BE BC03            POP              {R0, R1}    ; }
  137 000000C0 F100 0030       ADD              R0, R0, #48 ; 
  138 000000C4 F7FF FFFE       BL               ST7735_OutChar ; 
  139 000000C8 BC03            POP              {R0, R1}    ;
  140 000000CA F100 0030       ADD              R0, R0, #48 ; 
  141 000000CE F7FF FFFE       BL               ST7735_OutChar ;
  142 000000D2 E8BD 4002       POP              {R1, LR}
  143 000000D6         
  144 000000D6         Stop_Popping_2                       ; Aww... 
  145 000000D6 4770            BX               LR
  146 000000D8         
  147 000000D8                 ALIGN
  148 000000D8         ;* * * * * * * * End of LCD_OutFix * * * * * * * *
  149 000000D8         
  150 000000D8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  151 000000D8                 END                          ; end of file
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\print.
d -o.\print.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --list=.\print.lst Print.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 17 in file Print.s
   Uses
      None
Comment: .text unused
LCD_OutDec 00000000

Symbol: LCD_OutDec
   Definitions
      At line 42 in file Print.s
   Uses
      At line 14 in file Print.s
Comment: LCD_OutDec used once
LCD_OutFix 00000044

Symbol: LCD_OutFix
   Definitions
      At line 90 in file Print.s
   Uses
      At line 15 in file Print.s
Comment: LCD_OutFix used once
Not_Yet 00000018

Symbol: Not_Yet
   Definitions
      At line 55 in file Print.s
   Uses
      At line 50 in file Print.s
Comment: Not_Yet used once
Not_Yet_2 0000009A

Symbol: Not_Yet_2
   Definitions
      At line 122 in file Print.s
   Uses
      At line 115 in file Print.s
Comment: Not_Yet_2 used once
Stack_It 0000000A

Symbol: Stack_It
   Definitions
      At line 48 in file Print.s
   Uses
      At line 62 in file Print.s
Comment: Stack_It used once
Stack_It_2 00000084

Symbol: Stack_It_2
   Definitions
      At line 113 in file Print.s
   Uses
      At line 98 in file Print.s
      At line 130 in file Print.s

Start_Popping 0000002C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Start_Popping
   Definitions
      At line 64 in file Print.s
   Uses
      At line 53 in file Print.s
      At line 71 in file Print.s

Start_Popping_2 000000B4

Symbol: Start_Popping_2
   Definitions
      At line 132 in file Print.s
   Uses
      At line 120 in file Print.s
Comment: Start_Popping_2 used once
Stop_Popping 00000040

Symbol: Stop_Popping
   Definitions
      At line 73 in file Print.s
   Uses
      At line 68 in file Print.s
Comment: Stop_Popping used once
Stop_Popping_2 000000D6

Symbol: Stop_Popping_2
   Definitions
      At line 144 in file Print.s
   Uses
      At line 111 in file Print.s
Comment: Stop_Popping_2 used once
11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

ST7735_OutChar 00000000

Symbol: ST7735_OutChar
   Definitions
      At line 12 in file Print.s
   Uses
      At line 52 in file Print.s
      At line 70 in file Print.s
      At line 101 in file Print.s
      At line 103 in file Print.s
      At line 105 in file Print.s
      At line 107 in file Print.s
      At line 109 in file Print.s
      At line 117 in file Print.s
      At line 119 in file Print.s
      At line 135 in file Print.s
      At line 138 in file Print.s
      At line 141 in file Print.s

ST7735_OutString 00000000

Symbol: ST7735_OutString
   Definitions
      At line 13 in file Print.s
   Uses
      None
Comment: ST7735_OutString unused
2 symbols
343 symbols in table
